###################
#   Exercise 1    #
###################

# Addition, subtraction
print(5 + 5)
print(5 - 5)

# Multiplication, division, modulo, and exponentiation
print(3 * 5)
print(10 / 2)
print(18 % 7)
print(4 ** 2)

# How much is your $100 worth after 7 years?
print(100*1.1**7)

###################
#   Exercise 2    #
###################

# Create a variable savings
savings = 100

# Print out savings
print(savings)

###################
#   Exercise 3    #
###################

# Create a variable savings
savings = 100

# Create a variable growth_multiplier
growth_multiplier = 1.1

# Calculate result
result = savings * growth_multiplier**7

# Print out result
print(result)

###################
#   Exercise 4    #
###################

# Create a variable desc
desc = "compound interest"

# Create a variable profitable
profitable = True

###################
#   Exercise 5    #
###################

savings = 100
growth_multiplier = 1.1
desc = "compound interest"

# Assign product of growth_multiplier and savings to year1
year1 = savings * growth_multiplier

# Print the type of year1
print(type(year1))

# Assign sum of desc and desc to doubledesc
doubledesc = desc + desc

# Print out doubledesc
print(doubledesc)

###################
#   Exercise 6    #
###################

# Definition of savings and result
savings = 100
result = 100 * 1.10 ** 7

# Fix the printout
print("I started with $" + str(savings) + " and now have $" + str(result) + ". Awesome!")

# Definition of pi_string
pi_string = "3.1415926"

# Convert pi_string into float: pi_float
pi_float = float(pi_string)

###################
#   Exercise 7    #
###################

# area variables (in square meters)
hall = 11.25
kit = 18.0
liv = 20.0
bed = 10.75
bath = 9.50

# Create list areas
areas = [hall, kit, liv, bed, bath]

# Print areas
print(areas)

###################
#   Exercise 8    #
###################

# area variables (in square meters)
hall = 11.25
kit = 18.0
liv = 20.0
bed = 10.75
bath = 9.50

# Adapt list areas
areas = ["hallway",hall,"kitchen", kit, "living room", liv,"bedroom", bed, "bathroom", bath]

# Print areas
print(areas)

###################
#   Exercise 10   #
###################

# area variables (in square meters)
hall = 11.25
kit = 18.0
liv = 20.0
bed = 10.75
bath = 9.50

# house information as list of lists
house = [["hallway", hall],
         ["kitchen", kit],
         ["living room", liv],
         ["bedroom", bed],
         ["bathroom",bath]]

# Print out house
print(house)

# Print out the type of house
print(type(house))

###################
#   Exercise 11   #
###################

# Print the sorted list prices
prices = [159.54, 37.13, 71.17]
prices.sort()
print(prices)

###################
#   Exercise 12   #
###################

names = ['Apple Inc', 'Coca-Cola', 'Walmart']

# Append a name to the list names
names.append('Amazon.com')
print(names)

# Extend list names
more_elements = ['DowDuPont', 'Alphabet Inc']
names.extend(more_elements)
print(names)

###################
#   Exercise 13   #
###################

prices = [159.54, 37.13, 71.17, 1705.54, 66.43, 1132.34]
names = ['Apple Inc', 'Coca-Cola', 'Walmart', 'Amazon.com', 'DowDuPont', 'Alphabet Inc']

# Do not modify this
max_price = max(prices)

# Identify index of max price
max_index = prices.index(max_price)

# Identify the name of the company with max price
max_stock_name = names[max_index]

# Fill in the blanks
print('The largest stock price is associated with ' + max_stock_name + ' and is $' + str(max_price) + '.')

###################
#   Exercise 14   #
###################

# Import numpy as np
import numpy as np

# Lists
prices = [170.12, 93.29, 55.28, 145.30, 171.81, 59.50, 100.50]
earnings = [9.2, 5.31, 2.41, 5.91, 15.42, 2.51, 6.79]

# NumPy arrays
prices_array = np.array(prices)
earnings_array = np.array(earnings)

# Print the arrays
print(prices_array)
print(earnings_array)

###################
#   Exercise 15   #
###################

# Import numpy as np
import numpy as np

# Create PE ratio array
pe_array = prices_array/earnings_array

# Print pe_array
print(pe_array)

###################
#   Exercise 16   #
###################

# Subset the first three elements
prices_subset_1 = prices_array[0:3]
print(prices_subset_1)

###################
#   Exercise 17   #
###################
import numpy as np

prices = [170.12, 93.29, 55.28, 145.3, 171.81, 59.5, 100.5]
earnings = [9.2, 5.31, 2.41, 5.91, 15.42, 2.51, 6.79]

# Create a 2D array of prices and earnings
stock_array = np.array([prices, earnings])
print(stock_array)

# Print the shape of stock_array
print(stock_array.shape)

# Print the size of stock_array
print(stock_array.size)

###################
#   Exercise 18   #
###################

stock_array_transposed = stock_array.transpose()

# Subset prices from stock_array_transposed
prices = stock_array_transposed[:, 0]
print(prices)

###################
#   Exercise 19   #
###################

# Calculate the mean
prices_mean = np.mean(prices)
print(prices_mean)

###################
#   Exercise 20   #
###################
import numpy as np

# Create and print company IDs
company_ids = np.arange(1, 8, 1)
print(company_ids)

# Use array slicing to select specific company IDs
company_ids_odd = np.arange(1, 8, 2)
print(company_ids_odd)

###################
#   Exercise 21   #
###################
import numpy as np
prices_list = [170.12, 93.29, 55.28, 145.3, 171.81, 59.5, 100.5]
prices = np.array(prices_list)

# Find the mean
price_mean = np.mean(prices)

# Create boolean array
boolean_array = (prices > price_mean)
print(boolean_array)

# Select prices that are greater than average
above_avg = prices[boolean_array]
print(above_avg)

###################
#   Exercise 22   #
###################
import numpy as np

names_list = ['Apple Inc','Abbvie Inc','Abbott Laboratories','Accenture Technologies','Allergan Plc']
sectors_list = ['Information Technology','Health Care','Health Care','Information Technologies','Health Care']
names, sectors = np.array(names_list), np.array(sectors_list)

# Create boolean array
boolean_array = (sectors == 'Health Care')
print(boolean_array)

# Print only health care companies
health_care = names[boolean_array]
print(health_care)

###################
#   Exercise 23   #
###################
# This part of codes is to create two lists for days and prices
import pandas as pd
df = pd.read_csv('Exercise_23.csv', header = None)
days = list(df[0])
prices = list(df[1])

# Import matplotlib.pyplot with the alias plt
import matplotlib.pyplot as plt

# Plot the price of stock over time
plt.plot(days, prices, color="red", linestyle="--")

# Display the plot
plt.show()

###################
#   Exercise 24   #
###################

import matplotlib.pyplot as plt

# Plot price as a function of time
plt.plot(days, prices, color="red", linestyle="--")

# Add x and y labels
plt.xlabel('Days')
plt.ylabel('Prices, $')

# Add plot title
plt.title('Company Stock Prices Over Time')

# Show plot
plt.show()

###################
#   Exercise 25   #
###################
# This part of codes is to create the lists
import pandas as pd
df = pd.read_csv('Exercise_25.csv', header = None)
days = list(df[0])
prices1 = list(df[1])
prices2 = list(df[2])

import matplotlib.pyplot as plt

# Plot two lines of varying colors
plt.plot(days, prices1, color='red')
plt.plot(days, prices2, color='green')

# Add labels
plt.xlabel('Days')
plt.ylabel('Prices, $')
plt.title('Stock Prices Over Time')
plt.show()

###################
#   Exercise 26   #
###################
# This part of codes is to create two lists for days and prices
import pandas as pd
df = pd.read_csv('Exercise_23.csv', header = None)
days = list(df[0])
prices = list(df[1])

# Import pyplot as plt
import matplotlib.pyplot as plt

# Plot price as a function of time
plt.scatter(days, prices, color='green', s=0.1)

# Show plot
plt.show()

###################
#   Exercise 27   #
###################
# This part of codes is to create two lists for days and prices
import pandas as pd
df = pd.read_csv('Exercise_23.csv', header = None)
days = list(df[0])
prices = list(df[1])

# Import pyplot as plt
import matplotlib.pyplot as plt

# Plot histogram
plt.hist(prices, bins=100)

# Display plot
plt.show()

###################
#   Exercise 28   #
###################
# This part of codes is to create two lists for stock_A and stock_B
import pandas as pd
df = pd.read_csv('Exercise_28.csv', header = None)
stock_A = list(df[0])
stock_B = list(df[1])

# Plot histogram of stocks_A
plt.hist(stock_A, bins=100, alpha=0.4)

# Plot histogram of stocks_B
plt.hist(stock_B, bins=100, alpha=0.4)

# Display plot
plt.show()

###################
#   Exercise 29   #
###################
# This part of codes is to create two lists for stock_A and stock_B
import pandas as pd
df = pd.read_csv('Exercise_28.csv', header = None)
stock_A = list(df[0])
stock_B = list(df[1])

# Plot stock_A and stock_B histograms
plt.hist(stock_A, bins=100, alpha=0.4, label='Stock A')
plt.hist(stock_B, bins=100, alpha=0.4, label='Stock B')

# Add the legend
plt.legend()

# Display the plot
plt.show()

###################
#   Exercise 30   #
###################
# This part of codes is to create the lists of data
import pandas as pd
df = pd.read_csv('Exercise_30.csv', header = None)
names = list(df[0])
prices = list(df[1])
earnings = list(df[2])
sectors = list(df[3])

# First four items of names
print(names[0:4])

# Print information on last company
print(names[-1])
print(prices[-1])
print(earnings[-1])
print(sectors[-1])

###################
#   Exercise 31   #
###################
# This part of codes is to create the lists of data
import pandas as pd
df = pd.read_csv('Exercise_30.csv', header = None)
names = list(df[0])
prices = list(df[1])
earnings = list(df[2])
sectors = list(df[3])

# Import numpy as np
import numpy as np

# Convert lists to arrays
prices_array = np.array(prices)
earnings_array = np.array(earnings)

# Calculate P/E ratio
pe = prices_array/earnings_array
print(pe)

###################
#   Exercise 32   #
###################
sectors = np.array(sectors)
names = np.array(names)

# Create boolean array
boolean_array = (sectors == 'Information Technology')

# Subset sector-specific data
it_names = names[boolean_array]
it_pe = pe[boolean_array]

# Display sector names
print(it_names)
print(it_pe)

###################
#   Exercise 33   #
###################

# Calculate mean and standard deviation
it_pe_mean = np.mean(it_pe)
it_pe_std = np.std(it_pe)

print(it_pe_mean)
print(it_pe_std)

###################
#   Exercise 33   #
###################
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

it_id = range(0, 15)
cs_id = range(0, 12)

df = pd.read_csv('Exercise_33.csv', header = None)
it_pe = np.array(list(df[0]))
cs_pe = np.array(list(df[1]))

# Make a scatterplot
plt.scatter(it_id, it_pe, color = 'red', label = 'IT')
# For cs, there are only 12 observations
plt.scatter(cs_id, cs_pe[:-3], color = 'green', label = 'CS')

# Add legend
plt.legend()

# Add labels
plt.xlabel('Company ID')
plt.ylabel('P/E Ratio')
plt.show()

###################
#   Exercise 34   #
###################

# Import matplotlib.pyplot with the alias plt
import matplotlib.pyplot as plt

# Plot histogram
plt.hist(it_pe,bins=8)

# Add x-label
plt.xlabel('P/E ratio')

# Add y-label
plt.ylabel('Frequency')

# Show plot
plt.show()

###################
#   Exercise 36   #
###################

# Identify P/E ratio within it_pe that is > 50
outlier_price = it_pe[it_pe > 50]

# Identify the company with PE ratio > 50
outlier_name = it_names[it_pe > 50]

# Display results
print("In 2017, " + str(outlier_name[0]) +
" had an abnormally high P/E ratio of " + str(round(outlier_price[0], 2)) + ".")
